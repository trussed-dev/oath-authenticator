window.SIDEBAR_ITEMS = {"enum":[["Entry","A view into an entry in the map"]],"mod":[["binary_heap","A priority queue implemented with a binary heap."],["mpmc","A fixed capacity Multiple-Producer Multiple-Consumer (MPMC) lock-free queue"],["pool","A heap-less, interrupt-safe, lock-free memory pool (*)"],["sorted_linked_list","A fixed sorted priority linked list, similar to `BinaryHeap` but with different properties on `push`, `pop`, etc. For example, the sorting of the list will never `memcpy` the underlying value, so having large objects in the list will not cause a performance hit."],["spsc","Fixed capacity Single Producer Single Consumer (SPSC) queue"]],"struct":[["Deque","A fixed capacity double-ended queue."],["HistoryBuffer","A “history buffer”, similar to a write-only ring buffer of fixed length."],["IndexMap","Fixed capacity `IndexMap`"],["IndexSet","Fixed capacity `IndexSet`."],["LinearMap","A fixed capacity map / dictionary that performs lookups via linear search"],["OccupiedEntry","An occupied entry which can be manipulated"],["OldestOrdered","An iterator on the underlying buffer ordered from oldest data to newest"],["String","A fixed capacity `String`"],["VacantEntry","A view into an empty slot in the underlying map"],["Vec","A fixed capacity `Vec`"]],"type":[["FnvIndexMap","A `heapless::IndexMap` using the default FNV hasher"],["FnvIndexSet","A `heapless::IndexSet` using the default FNV hasher. A list of all Methods and Traits available for `FnvIndexSet` can be found in the `heapless::IndexSet` documentation."]]};